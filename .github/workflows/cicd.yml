# This workflow will do a clean installation of node dependencies, cache/restore them, lint then build the source code, and run unit tests

name: ci/cd

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

permissions:
  id-token: write

env:
  AWS_REGION: ap-southeast-2
  OIDC_IAM_ROLE: ${{ secrets.OIDC_IAM_ROLE }}

# Allow a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: Dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Unit Test
        run: npm test


  deploy-dev:
    runs-on: ubuntu-latest

    needs:
      - build

    environment: dev
    env:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_HOSTED_ZONE_DOMAIN: dev.capturedlabs.com
      ENV: dev
      PORT: 3000

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: Dependencies
        run: npm ci

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.OIDC_IAM_ROLE }}

      - name: Deploy rest-api-ecs
        run: npm run deploy --scope=@capturedlabs/rest-api-ecs

  integration-test-dev:
    runs-on: ubuntu-latest

    needs:
      - deploy-dev

    environment: dev
    env:
      ENV: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: Dependencies
        run: npm ci

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.OIDC_IAM_ROLE }}

      - name: Integration Test
        run: npm run test:integration
